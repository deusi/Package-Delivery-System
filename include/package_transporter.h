/**
 * @file package_transporter.h
 */
#ifndef PACKAGE_TRANSPORTER_H
#define PACKAGE_TRANSPORTER_H

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include "entity_base.h"
#include <EntityProject/graph.h>
#include "package.h"
#include "vector3D.h"
#include "battery.h"
#include "IStrategy.h"
#include <EntityProject/facade/common.h>
namespace csci3081 {

/*******************************************************************************
 * Class Definitions
 ******************************************************************************/
/**
 * @brief The base class for entities that transport packages.
 *
 * For drone and robot objects. Inherits from the EntityBase class, which in turn inherits
 * from the IEntity class. All IEntity functions are implemented in EntityBase.
 *
 */

class PackageTransporter : public csci3081::EntityBase {
	public:
		/**
		 @brief Virtual Destructor: To call derived classes' constructors upon deletion.
		*/
		virtual ~PackageTransporter() {};

		/**
		 @brief Gets num_deliveries_.

		 Used by ScheduleDelivery in delivery_simulation to help balance delivery load.
		*/
		int GetNumDeliveries();
		/**
		 @brief Gets max_weight_.
		*/
		double GetMaxWeight();
		/**
		 @brief Gets status_.
		*/
		std::string GetStatus();
		/**
		 @brief Sets status_.
		*/
		void SetStatus(std::string status);
		/**
		 @brief Sets graph_. Assigned when a package is scheduled to be delivered in ScheduleDelivery
		  in delivery_simulation.
		*/
		void SetGraph(const IGraph* graph);
		/**
		 @brief Adds a package delivery for the entity to handle.
		 @param [in] package A pointer to a package object that the entity will deliver.

		 Increments num_deliveries_, adds package to the queue of packages to be delivered (Found in
		 packages_to_deliver_.)
		*/
		void AddDelivery(Package* package);
		/**
		 @brief Sets path_ for the entity to follow the path generated by IGraph's GetPath function. Pure virtual
         method to be implemented in derived classes based on how each entity moves.
		*/
		virtual void SetPath(std::vector<float> start, std::vector<float> end) = 0;
		/**
		 @brief Gets the path
		*/
		std::vector< std::vector<float> > GetPath();
        /**
		 @brief Updates entity contents and position based on the status of the entity.
		 @param [in] dt A float which represents the change in time.

		 If the entity is Idle while packages are there to be delivered, it sets status_ to TravelingToPackage
		 and makes necessary calls to SetPath, CalculateNextPosition and adjusts package information as
		 necessary. dynamic_ will be set to true.
		 If the entity has reached the package, status_ is set to DeliveringPackage and similar calls to
		 SetPath, CalculateNextPosition are made. The package location is set to be moved with the entity,
		 and other relevant information for the package is updated.
		 If the entity reaches the destination, status_ is set to Idle and the package is removed from the
		 list of packages to deliver. The package details are adjusted in order for delivery_simulation to
		 slingshot it out of the scene.
		 Battery charge is updated if necessary.
		 */
		void Update(float dt);

		/**
		 @brief Calculates the next position for the entity to take, using the path that is set.
		 @param [in] dt Change in time for the entity to move from one position to the next.
		 @param [in] range A sum of radii for the package transporter and whatever it needs to pickup/deliver.
		 @return Next position of the entity.

		 Calculates the entity's next position based on path_ to follow. Once it completes a leg of the path to follow,
		 it discards the node from the vector list in path_. This is determined by if the magnitude of the current leg of
		 the path it has to follow is less than a fixed constant.
		 This makes use of Vector3D to assist in calculations.
		 */
		std::vector<float> CalculateNextPosition(float dt, float range);

		/**
		 * @brief Calculates and returns the remaining weight capacity of the transporter
		*/
		double GetAvailableWeight();


		/**
		 * @brief Calculates and returns the max capacity of the transporter minus the weight of all assigned packages
		*/
		double GetUnassignedCapacity();


	protected:
		/// Stores the speed that the entity will move at.
		double speed_;
		/// Stores a graph of the whole map for the entity to follow.
		const IGraph* graph_;
		/// Stores the path that the entity will follow while moving.
		std::vector< std::vector<float> > path_;
		/// Stores the current number of deliveries that the entity has to do.
		int num_deliveries_;
		/// A vector containing all packages the entity is scheduled to deliver.
		vector<Package*> packages_to_deliver_;
		/// A vector containing all packages the entity is currently holding
		vector<Package*> packages_in_inv_;
        /// Status of the entity.
		std::string status_;
        /// Battery for the entity.
		Battery* battery_;
		/// The max weight allowed for all packages being carried at once by this transporter
		double max_weight_;
		/// The max speed allowed for all packages being carried at once by this transporter
		const double MAX_SPEED = 30;
};

} //namespace csci3081

#endif //PACKAGE_TRANSPORTER_H
